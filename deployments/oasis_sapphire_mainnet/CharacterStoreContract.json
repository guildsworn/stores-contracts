{
  "address": "0x9205cC02bec917a6DADA5Bc13581d520c3322DF9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "characterHash",
          "type": "bytes32"
        }
      ],
      "name": "CharacterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "characterHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "CharacterBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "characterHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "paramId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "oldValue",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newValue",
          "type": "bytes"
        }
      ],
      "name": "CharacterDataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "characterHash",
          "type": "bytes32"
        }
      ],
      "name": "CharacterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ContractKilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "EldDiscountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "EldInstanceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "EldKickbackChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "NftInstanceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "PriceResolverInstanceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "StableInstanceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldValue",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "StoreActiveChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensSalvaged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "VaultAddressChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MODERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "characterHash_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active_",
          "type": "bool"
        }
      ],
      "name": "addCharacter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "characterHash_",
          "type": "bytes32"
        }
      ],
      "name": "buyWithEld",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "characterHash_",
          "type": "bytes32"
        }
      ],
      "name": "buyWithStable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "characterHash_",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "paramId_",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "paramData_",
          "type": "bytes"
        }
      ],
      "name": "editCharacter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvaliableCharacters",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "characterHash_",
          "type": "bytes32"
        }
      ],
      "name": "getCharacter",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "storeId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "characterHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct ICharacterStoreContract.CharacterDataResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "characterHash_",
          "type": "bytes32"
        }
      ],
      "name": "getCharacterEldKickback",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eldAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "characterHash_",
          "type": "bytes32"
        }
      ],
      "name": "getCharacterEldPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceInEld",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "page_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageSize_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "activeOnly_",
          "type": "bool"
        }
      ],
      "name": "getCharacters",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "storeId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "characterHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct ICharacterStoreContract.CharacterDataResult[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEldDiscount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEldKickback",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEldTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNftAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceResolverAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStableAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStoreActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "defaultAdminAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "moderatorAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vaultAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceResolverAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "eldAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stableAddress_",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "eldDiscount_",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "eldKickback_",
          "type": "uint8"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialised",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "killContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "characterHash_",
          "type": "bytes32"
        }
      ],
      "name": "removeCharacter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "salvageTokensFromContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "eldDiscount_",
          "type": "uint8"
        }
      ],
      "name": "setEldDiscount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "eldAddress_",
          "type": "address"
        }
      ],
      "name": "setEldInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "eldKickback_",
          "type": "uint8"
        }
      ],
      "name": "setEldKickback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress_",
          "type": "address"
        }
      ],
      "name": "setNftInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceResolverAddress_",
          "type": "address"
        }
      ],
      "name": "setPriceResolverInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stableAddress_",
          "type": "address"
        }
      ],
      "name": "setStableInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "active_",
          "type": "bool"
        }
      ],
      "name": "setStoreActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAddress_",
          "type": "address"
        }
      ],
      "name": "setVaultAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId_",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x212ad3b0d62c45de5913fcd9194b04c798794f6c387c6f4153d3702026aa0739",
  "receipt": {
    "to": null,
    "from": "0x0722BAa4700800465819Ad43d13a5f9DE1382996",
    "contractAddress": "0x9205cC02bec917a6DADA5Bc13581d520c3322DF9",
    "transactionIndex": 0,
    "gasUsed": "3679250",
    "logsBloom": "0x00000004000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000800000000200000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000008000000000000000000000000000010100000000000020000000000000000200000000000000000000000000000000000000000000000000",
    "blockHash": "0x58fb8395c26a9793165f1525d2776acf9027a64aedc88a21dae1aca6018647ce",
    "transactionHash": "0x212ad3b0d62c45de5913fcd9194b04c798794f6c387c6f4153d3702026aa0739",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 363318,
        "transactionHash": "0x212ad3b0d62c45de5913fcd9194b04c798794f6c387c6f4153d3702026aa0739",
        "address": "0x9205cC02bec917a6DADA5Bc13581d520c3322DF9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000722baa4700800465819ad43d13a5f9de1382996",
          "0x0000000000000000000000000722baa4700800465819ad43d13a5f9de1382996"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x58fb8395c26a9793165f1525d2776acf9027a64aedc88a21dae1aca6018647ce"
      }
    ],
    "blockNumber": 363318,
    "cumulativeGasUsed": "3679250",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "48d7e25234db534debec17b02098739f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"characterHash\",\"type\":\"bytes32\"}],\"name\":\"CharacterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"characterHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CharacterBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"characterHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paramId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"oldValue\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newValue\",\"type\":\"bytes\"}],\"name\":\"CharacterDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"characterHash\",\"type\":\"bytes32\"}],\"name\":\"CharacterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractKilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"EldDiscountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"EldInstanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"EldKickbackChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"NftInstanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"PriceResolverInstanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"StableInstanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"StoreActiveChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensSalvaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"VaultAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"characterHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active_\",\"type\":\"bool\"}],\"name\":\"addCharacter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"characterHash_\",\"type\":\"bytes32\"}],\"name\":\"buyWithEld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"characterHash_\",\"type\":\"bytes32\"}],\"name\":\"buyWithStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"characterHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"paramId_\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"paramData_\",\"type\":\"bytes\"}],\"name\":\"editCharacter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvaliableCharacters\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"characterHash_\",\"type\":\"bytes32\"}],\"name\":\"getCharacter\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"storeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"characterHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct ICharacterStoreContract.CharacterDataResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"characterHash_\",\"type\":\"bytes32\"}],\"name\":\"getCharacterEldKickback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eldAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"characterHash_\",\"type\":\"bytes32\"}],\"name\":\"getCharacterEldPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInEld\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"page_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activeOnly_\",\"type\":\"bool\"}],\"name\":\"getCharacters\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"storeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"characterHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct ICharacterStoreContract.CharacterDataResult[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEldDiscount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEldKickback\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEldTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceResolverAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStableAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStoreActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultAdminAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moderatorAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceResolverAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"eldAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableAddress_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"eldDiscount_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eldKickback_\",\"type\":\"uint8\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"characterHash_\",\"type\":\"bytes32\"}],\"name\":\"removeCharacter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"salvageTokensFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"eldDiscount_\",\"type\":\"uint8\"}],\"name\":\"setEldDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eldAddress_\",\"type\":\"address\"}],\"name\":\"setEldInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"eldKickback_\",\"type\":\"uint8\"}],\"name\":\"setEldKickback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"}],\"name\":\"setNftInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceResolverAddress_\",\"type\":\"address\"}],\"name\":\"setPriceResolverInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stableAddress_\",\"type\":\"address\"}],\"name\":\"setStableInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active_\",\"type\":\"bool\"}],\"name\":\"setStoreActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress_\",\"type\":\"address\"}],\"name\":\"setVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId_\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CharacterStoreContract.sol\":\"CharacterStoreContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@guildsworn/priceresolver-contracts/contracts/interfaces/IPriceResolverContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\ninterface IPriceResolverContract {\\n  function DEFAULT_ADMIN_ROLE (  ) external view returns ( bytes32 );\\n  function getRoleAdmin ( bytes32 role ) external view returns ( bytes32 );\\n  function getRoleMember ( bytes32 role, uint256 index ) external view returns ( address );\\n  function getRoleMemberCount ( bytes32 role ) external view returns ( uint256 );\\n  function getStableAddress (  ) external view returns ( address );\\n  function getStableDecimals (  ) external view returns ( uint256 );\\n  function getStablePrice (  ) external view returns ( uint256 );\\n  function getTokenAddress (  ) external view returns ( address );\\n  function getTokenDecimals (  ) external view returns ( uint256 );\\n  function getTokenPrice (  ) external view returns ( uint256 );\\n  function grantRole ( bytes32 role, address account ) external;\\n  function hasRole ( bytes32 role, address account ) external view returns ( bool );\\n  function killContract (  ) external;\\n  function renounceRole ( bytes32 role, address account ) external;\\n  function revokeRole ( bytes32 role, address account ) external;\\n  function salvageTokensFromContract ( address tokenAddress_, address to_, uint256 amount_ ) external;\\n  function supportsInterface ( bytes4 interfaceId ) external view returns ( bool );\\n}\\n\",\"keccak256\":\"0xcad5e85338a72c21ca089a817dfab4495025e3dc39d19420c1bf919b89f767f6\",\"license\":\"MIT\"},\"@guildsworn/token-contracts/contracts/interfaces/ICharacterNftContract.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense \\npragma solidity ^0.8.4;\\ninterface ICharacterNftContract {\\n  struct CharacterNftResult {\\n\\t\\tuint256 id;\\n\\t\\tstring uri;\\n\\t\\tbytes32 class;\\n\\t\\taddress lockedAt;\\n\\t\\tbool isTransferable;\\n\\t}\\n\\n  function MINTER_ROLE (  ) external view returns ( bytes32 );\\n  function MODERATOR_ROLE (  ) external view returns ( bytes32 );\\n  function burn ( uint256 characterId_ ) external;\\n  function externalUnlockCharacter ( address userAddress_, uint256 slotId_, uint256 characterId_, address guildAddress_, bytes memory extraData_ ) external;\\n  function getBaseURI (  ) external view returns ( string memory );\\n  function getCharacterLockedAt ( uint256 tokenId_ ) external view returns ( address );\\n  function getCharactersClass ( uint256 tokenId_ ) external view returns ( bytes32 );\\n  function getRoyaltyNumerator (  ) external view returns ( uint96 );\\n  function getVaultAddress (  ) external view returns ( address );\\n  function init ( address defaultAdminAddress_, address moderatorAddress_, address vaultAddress_, address[] memory minterAddressArray_, uint96 royaltyNumerator_ ) external;\\n  function isCharacterLocked ( uint256 tokenId_ ) external view returns ( bool );\\n  function isGuildWhitelisted ( address guildAddress_ ) external view returns ( bool );\\n  function isInitialised (  ) external view returns ( bool );\\n  function isTransferable ( bytes32 classHash_ ) external view returns ( bool );\\n  function lockCharacter ( uint256 slotId_, uint256 characterId_, address guildAddress_, bytes memory extraData_ ) external;\\n  function owner (  ) external view returns ( address );\\n  function safeMint ( address to_, bytes32 classHash_ ) external returns ( uint256 );\\n  function salvageTokensFromContract ( address tokenAddress_, address to_, uint256 amount_ ) external;\\n  function setBaseURI ( string memory baseUri_ ) external;\\n  function setNotTransferable ( bytes32 classHash_, bool nonTransferable_) external;\\n  function setRoyaltyNumerator ( uint96 royaltyNumerator_ ) external;\\n  function setTokenURI ( uint256 tokenId_, string memory tokenUri_ ) external;\\n  function setVaultAddress ( address vaultAddress_ ) external;\\n  function setWhitelistGuild ( address guildAddress_, bool isWhitelisted_ ) external;\\n  function unlockCharacter ( uint256 slotId_, uint256 characterId_, address guildAddress_, bytes memory extraData_ ) external;\\n  function getCharacter(uint256 tokenId_) external view returns (CharacterNftResult memory);\\n  function getCharactersByAccount(uint256 page_, uint256 pageSize_, address account_) external view returns (CharacterNftResult[] memory);\\n}\\n\",\"keccak256\":\"0xf12c0cef01e0a119541e43c9d30e1a003d52a85183eb5d007a9222707c5d847a\",\"license\":\"Unlicense\"},\"@guildsworn/token-contracts/contracts/interfaces/IEldfallTokenContract.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense \\npragma solidity ^0.8.4;\\ninterface IEldfallTokenContract {\\n  function MINTER_ROLE (  ) external view returns ( bytes32 );\\n  function init ( address defaultAdminAddress_, address[] memory minterAddressArray_ ) external;\\n  function isInitialised (  ) external view returns ( bool );\\n  function safeMint ( address to_, uint256 amount_ ) external;\\n  function salvageTokensFromContract ( address tokenAddress_, address to_, uint256 amount_ ) external;\\n  function burn(uint256 amount_) external;\\n  function burnFrom(address account_, uint256 amount_) external;\\n}\\n\",\"keccak256\":\"0x8bf9b2d74416aec201ea27003f6a0e8addb2878c59be0d6ab4c5072a83b69de1\",\"license\":\"Unlicense\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/CharacterStoreContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/ICharacterStoreContract.sol\\\";\\n\\nimport \\\"@guildsworn/token-contracts/contracts/interfaces/ICharacterNftContract.sol\\\";\\nimport \\\"@guildsworn/token-contracts/contracts/interfaces/IEldfallTokenContract.sol\\\";\\nimport \\\"@guildsworn/priceresolver-contracts/contracts/interfaces/IPriceResolverContract.sol\\\";\\n\\ncontract CharacterStoreContract is ReentrancyGuard, AccessControlEnumerable, ICharacterStoreContract{\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeERC20 for IEldfallTokenContract;\\n\\n\\tbytes32 public constant MODERATOR_ROLE = keccak256(\\\"MODERATOR_ROLE\\\");\\n\\n\\tIPriceResolverContract private _priceResolverInstance;\\n\\tIEldfallTokenContract private _eldInstance;\\n\\tICharacterNftContract private _nftInstance;\\n\\taddress private _vaultAddress;\\n\\tIERC20 private _stableInstance;\\n\\n\\tuint8 private _eldDiscount;\\n\\tuint8 private _eldKickback;\\n\\tbool private _storeActive;\\n\\tbool private _initialised;\\n\\n\\tbytes32[] private _avaliableCharacters;\\n\\tmapping(bytes32 => CharacterData) private _characterDataMap;\\n\\n\\tconstructor() {\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\t}\\n\\n\\t// **************************************************\\n\\t// *************** DEFAULT_ADMIN REGION *************\\n\\t// **************************************************\\n\\tfunction init(\\n\\t\\taddress defaultAdminAddress_,\\n\\t\\taddress moderatorAddress_,\\n\\t\\taddress vaultAddress_,\\n\\t\\taddress priceResolverAddress_,\\n\\t\\taddress eldAddress_,\\n\\t\\taddress nftAddress_,\\n\\t\\taddress stableAddress_,\\n\\t\\tuint8 eldDiscount_,\\n\\t\\tuint8 eldKickback_\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\trequire(!_initialised, \\\"Contract is already initialised!\\\");\\n\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, defaultAdminAddress_);\\n\\t\\t_grantRole(MODERATOR_ROLE, moderatorAddress_);\\n\\n\\t\\t_vaultAddress = vaultAddress_;\\n\\t\\t_priceResolverInstance = IPriceResolverContract(\\n\\t\\t\\tpriceResolverAddress_\\n\\t\\t);\\n\\t\\t_eldInstance = IEldfallTokenContract(eldAddress_);\\n\\t\\t_nftInstance = ICharacterNftContract(nftAddress_);\\n\\t\\t_stableInstance = IERC20(stableAddress_);\\n\\t\\t_eldDiscount = eldDiscount_;\\n\\t\\t_eldKickback = eldKickback_;\\n\\t\\t_initialised = true;\\n\\t\\t_revokeRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\t}\\n\\n\\tfunction salvageTokensFromContract(address tokenAddress_, address to_, uint amount_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tbytes memory callPayload = abi.encodePacked(\\n\\t\\t\\tbytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\"))),\\n\\t\\t\\tabi.encode(to_, amount_)\\n\\t\\t);\\n\\t\\t(bool success, ) = address(tokenAddress_).call(callPayload);\\n\\t\\trequire(success, \\\"Call failed!\\\");\\n\\t\\temit TokensSalvaged(tokenAddress_, to_, amount_);\\n\\t}\\n\\n\\tfunction killContract() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\temit ContractKilled();\\n\\t\\tselfdestruct(payable(_msgSender()));\\n\\t}\\n\\n\\t// **************************************************\\n\\t// ***************** MODERATOR REGION ***************\\n\\t// **************************************************\\n\\tfunction setVaultAddress(address vaultAddress_) public onlyRole(MODERATOR_ROLE) {\\n\\t\\trequire(_vaultAddress != vaultAddress_, \\\"Value is already set!\\\");\\n\\t\\temit VaultAddressChanged(_vaultAddress, vaultAddress_);\\n\\t\\t_vaultAddress = vaultAddress_;\\n\\t}\\n\\n\\tfunction setPriceResolverInstance(address priceResolverAddress_) public onlyRole(MODERATOR_ROLE) {\\n\\t\\trequire(address(_priceResolverInstance) != priceResolverAddress_, \\\"Value is already set!\\\");\\n\\t\\temit PriceResolverInstanceChanged(address(_priceResolverInstance), priceResolverAddress_);\\n\\t\\t_priceResolverInstance = IPriceResolverContract(priceResolverAddress_);\\n\\t}\\n\\n\\tfunction setEldInstance(address eldAddress_) public onlyRole(MODERATOR_ROLE) {\\n\\t\\trequire(address(_eldInstance) != eldAddress_, \\\"Value is already set!\\\");\\n\\t\\temit EldInstanceChanged(address(_eldInstance), eldAddress_);\\n\\t\\t_eldInstance = IEldfallTokenContract(eldAddress_);\\n\\t}\\n\\n\\tfunction setNftInstance(address nftAddress_) public onlyRole(MODERATOR_ROLE) {\\n\\t\\trequire(address(_nftInstance) != nftAddress_, \\\"Value is already set!\\\");\\n\\t\\temit NftInstanceChanged(address(_nftInstance), nftAddress_);\\n\\t\\t_nftInstance = ICharacterNftContract(nftAddress_);\\n\\t}\\n\\n\\tfunction setStableInstance(address stableAddress_) public onlyRole(MODERATOR_ROLE) {\\n\\t\\trequire(address(_stableInstance) != stableAddress_, \\\"Value is already set!\\\");\\n\\t\\temit StableInstanceChanged(address(_stableInstance), stableAddress_);\\n\\t\\t_stableInstance = IERC20(stableAddress_);\\n\\t}\\n\\n\\tfunction setEldDiscount(uint8 eldDiscount_) public onlyRole(MODERATOR_ROLE) {\\n\\t\\trequire(_eldDiscount != eldDiscount_, \\\"Value is already set!\\\");\\n\\t\\trequire(eldDiscount_ < 100, \\\"Value must be lower than 100!\\\");\\n\\t\\temit EldDiscountChanged(_eldDiscount, eldDiscount_);\\n\\t\\t_eldDiscount = eldDiscount_;\\n\\t}\\n\\n\\tfunction setEldKickback(uint8 eldKickback_) public onlyRole(MODERATOR_ROLE) {\\n\\t\\trequire(_eldKickback != eldKickback_, \\\"Value is already set!\\\");\\n\\t\\trequire(eldKickback_ < 100, \\\"Value must be lower than 100!\\\");\\n\\t\\temit EldKickbackChanged(_eldKickback, eldKickback_);\\n\\t\\t_eldKickback = eldKickback_;\\n\\t}\\n\\n\\tfunction setStoreActive(bool active_) public onlyRole(MODERATOR_ROLE) {\\n\\t\\trequire(_storeActive != active_, \\\"Value is already set!\\\");\\n\\t\\tif (active_) {\\n\\t\\t\\trequire(_initialised, \\\"Contract is not initialised!\\\");\\n\\t\\t}\\n\\t\\temit StoreActiveChanged(_storeActive, active_);\\n\\t\\t_storeActive = active_;\\n\\t}\\n\\n\\tfunction addCharacter(string memory name_, bytes32 characterHash_, uint256 price_, bool active_) public onlyRole(MODERATOR_ROLE) {\\n\\t\\trequire(!_characterDataMap[characterHash_].avaliable, \\\"Character is already avaliable!\\\");\\n\\t\\t_characterDataMap[characterHash_] = CharacterData(\\n\\t\\t\\tname_,\\n\\t\\t\\t_avaliableCharacters.length,\\n\\t\\t\\tcharacterHash_,\\n\\t\\t\\tprice_,\\n\\t\\t\\tactive_,\\n\\t\\t\\ttrue\\n\\t\\t);\\n\\t\\t_avaliableCharacters.push(characterHash_);\\n\\t\\temit CharacterAdded(characterHash_);\\n\\t}\\n\\n\\tfunction editCharacter(bytes32 characterHash_, uint8 paramId_, bytes memory paramData_) public onlyRole(MODERATOR_ROLE) {\\n\\t\\trequire(_characterDataMap[characterHash_].avaliable, \\\"Character does not exist!\\\");\\n\\n\\t\\tif (paramId_ == uint256(CharacterParams.CHAR_NAME)) {\\n\\t\\t\\tstring memory nameNewValue = abi.decode(paramData_, (string));\\n\\t\\t\\tbytes memory nameOldValue = abi.encode(_characterDataMap[characterHash_].name);\\n\\t\\t\\trequire(keccak256(nameOldValue) != keccak256(paramData_), \\\"Param is already set!\\\");\\n\\t\\t\\temit CharacterDataUpdated(characterHash_, paramId_, nameOldValue, paramData_);\\n\\t\\t\\t_characterDataMap[characterHash_].name = nameNewValue;\\n\\t\\t} else if (paramId_ == uint256(CharacterParams.CHAR_STOREID)) {\\n\\t\\t\\tuint256 storeIdNewValue = abi.decode(paramData_, (uint256));\\n\\t\\t\\tuint256 storeIdOldValue = _characterDataMap[characterHash_].storeId;\\n\\t\\t\\trequire(storeIdNewValue < _avaliableCharacters.length, \\\"New id is out of range!\\\");\\n\\t\\t\\trequire(storeIdNewValue != storeIdOldValue, \\\"Param is already set!\\\");\\n\\t\\t\\tbytes32 firstChar = _avaliableCharacters[storeIdNewValue];\\n\\t\\t\\tbytes32 secondChar = _avaliableCharacters[storeIdOldValue];\\n\\n\\t\\t\\temit CharacterDataUpdated(firstChar, paramId_, abi.encode(storeIdOldValue), paramData_);\\n\\t\\t\\temit CharacterDataUpdated(secondChar, paramId_, paramData_, abi.encode(storeIdOldValue));\\n\\n\\t\\t\\t_avaliableCharacters[storeIdOldValue] = firstChar;\\n\\t\\t\\t_avaliableCharacters[storeIdNewValue] = secondChar;\\n\\t\\t\\t_characterDataMap[firstChar].storeId = storeIdOldValue;\\n\\t\\t\\t_characterDataMap[secondChar].storeId = storeIdNewValue;\\n\\t\\t} else if (paramId_ == uint256(CharacterParams.CHAR_HASH)) {\\n\\t\\t\\tbytes32 charHashNewValue = abi.decode(paramData_, (bytes32));\\n\\t\\t\\trequire(!_characterDataMap[charHashNewValue].avaliable, \\\"Character is already avaliable!\\\");\\n\\t\\t\\temit CharacterDataUpdated(characterHash_, paramId_, abi.encode(characterHash_), paramData_);\\n\\n\\t\\t\\t_avaliableCharacters[_characterDataMap[characterHash_].storeId] = charHashNewValue;\\n\\t\\t\\t_characterDataMap[charHashNewValue] = _characterDataMap[characterHash_];\\n\\t\\t\\t_characterDataMap[charHashNewValue].characterHash = charHashNewValue;\\n\\t\\t\\tdelete _characterDataMap[characterHash_];\\n\\t\\t} else if (paramId_ == uint256(CharacterParams.CHAR_PRICE)) {\\n\\t\\t\\tuint256 priceNewValue = abi.decode(paramData_, (uint256));\\n\\t\\t\\trequire(priceNewValue != _characterDataMap[characterHash_].price, \\\"Param is already set!\\\");\\n\\n\\t\\t\\temit CharacterDataUpdated(characterHash_, paramId_, paramData_, abi.encode(_characterDataMap[characterHash_].price));\\n\\t\\t\\t_characterDataMap[characterHash_].price = priceNewValue;\\n\\t\\t} else if (paramId_ == uint256(CharacterParams.CHAR_ACTIVE)) {\\n\\t\\t\\tbool activeNewValue = abi.decode(paramData_, (bool));\\n\\t\\t\\trequire(_characterDataMap[characterHash_].active != activeNewValue, \\\"Param is already set!\\\");\\n\\t\\t\\temit CharacterDataUpdated(characterHash_, paramId_, paramData_, abi.encode(_characterDataMap[characterHash_].active));\\n\\t\\t\\t_characterDataMap[characterHash_].active = activeNewValue;\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"Param does not exist\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tfunction removeCharacter(bytes32 characterHash_) public onlyRole(MODERATOR_ROLE) {\\n\\t\\trequire(_characterDataMap[characterHash_].avaliable, \\\"Character does not exist!\\\");\\n\\t\\tuint lastId = _avaliableCharacters.length - 1;\\n\\t\\tif (_characterDataMap[characterHash_].storeId != lastId) {\\n\\t\\t\\tbytes32 lastCharacterHash = _avaliableCharacters[lastId];\\n\\t\\t\\tuint currentCharacterId = _characterDataMap[characterHash_].storeId;\\n\\n\\t\\t\\t_avaliableCharacters[lastId] = characterHash_;\\n\\t\\t\\t_avaliableCharacters[currentCharacterId] = lastCharacterHash;\\n\\t\\t\\t_characterDataMap[characterHash_].storeId = lastId;\\n\\t\\t\\t_characterDataMap[lastCharacterHash].storeId = currentCharacterId;\\n\\t\\t\\temit CharacterDataUpdated(\\n\\t\\t\\t\\tcharacterHash_,\\n\\t\\t\\t\\t1,\\n\\t\\t\\t\\tabi.encode(currentCharacterId),\\n\\t\\t\\t\\tabi.encode(lastId)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t_avaliableCharacters.pop();\\n\\t\\tdelete _characterDataMap[characterHash_];\\n\\t\\temit CharacterRemoved(characterHash_);\\n\\t}\\n\\n\\t// **************************************************\\n\\t// ****************** PUBLIC REGION *****************\\n\\t// **************************************************\\n\\tfunction buyWithStable(bytes32 characterHash_) public nonReentrant {\\n\\t\\trequire(_storeActive, \\\"Store is closed!\\\");\\n\\t\\tCharacterData memory currentCharacter = _characterDataMap[characterHash_];\\n\\t\\trequire(currentCharacter.avaliable, \\\"Character does not exist!\\\");\\n\\t\\trequire(currentCharacter.active, \\\"Character is not active!\\\");\\n\\n\\t\\t// Transfer stable to vault\\n\\t\\tSafeERC20.safeTransferFrom(\\n\\t\\t\\t_stableInstance,\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\t_vaultAddress,\\n\\t\\t\\tcurrentCharacter.price\\n\\t\\t);\\n\\n\\t\\t// Mint character\\n\\t\\t_nftInstance.safeMint(_msgSender(), characterHash_);\\n\\n\\t\\temit CharacterBought(characterHash_, _msgSender(), address(_stableInstance), currentCharacter.price);\\n\\n\\t\\t// Process kickback\\n\\t\\tuint256 stableToEldPrice = _priceResolverInstance.getStablePrice();\\n\\t\\tuint256 stableDecimals = _priceResolverInstance.getStableDecimals();\\n\\t\\tuint256 tokenKickback = _getTokenKickback(currentCharacter.price, stableToEldPrice, stableDecimals);\\n\\t\\tif (tokenKickback > 0) {\\n\\t\\t\\t// Mint kickback ELD tokens to user\\n\\t\\t\\t_eldInstance.safeMint(_msgSender(), tokenKickback);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction buyWithEld(bytes32 characterHash_) public nonReentrant {\\n\\t\\trequire(_storeActive, \\\"Store is closed!\\\");\\n\\n\\t\\t// Calculate character price in eld with discaunt\\n\\t\\tuint256 priceInEld = getCharacterEldPrice(characterHash_);\\n\\t\\trequire(priceInEld > 0, \\\"Character ELD price is invalid!\\\");\\n\\n\\t\\t// Transfer eld to vault\\n\\t\\tSafeERC20.safeTransferFrom(IERC20(address(_eldInstance)), _msgSender(), _vaultAddress, priceInEld);\\n\\n\\t\\t// Mint character\\n\\t\\t_nftInstance.safeMint(_msgSender(), characterHash_);\\n\\t\\t\\n\\t\\temit CharacterBought(characterHash_, _msgSender(), address(_eldInstance), priceInEld);\\n\\t}\\n\\n\\t// **************************************************\\n\\t// ************** PUBLIC GETTERS REGION *************\\n\\t// **************************************************\\n\\tfunction getVaultAddress() public view returns (address) {\\n\\t\\treturn _vaultAddress;\\n\\t}\\n\\n\\tfunction getPriceResolverAddress() public view returns (address) {\\n\\t\\treturn address(_priceResolverInstance);\\n\\t}\\n\\n\\tfunction getEldTokenAddress() public view returns (address) {\\n\\t\\treturn address(_eldInstance);\\n\\t}\\n\\n\\tfunction getNftAddress() public view returns (address) {\\n\\t\\treturn address(_nftInstance);\\n\\t}\\n\\n\\tfunction getStableAddress() public view returns (address) {\\n\\t\\treturn address(_stableInstance);\\n\\t}\\n\\n\\tfunction getEldDiscount() public view returns (uint8) {\\n\\t\\treturn _eldDiscount;\\n\\t}\\n\\n\\tfunction getEldKickback() public view returns (uint8) {\\n\\t\\treturn _eldKickback;\\n\\t}\\n\\n\\tfunction getStoreActive() public view returns (bool) {\\n\\t\\treturn _storeActive;\\n\\t}\\n\\n\\tfunction getAvaliableCharacters() public view returns (bytes32[] memory) {\\n\\t\\treturn _avaliableCharacters;\\n\\t}\\n\\n\\tfunction getCharacter(bytes32 characterHash_) public view returns (CharacterDataResult memory) {\\n\\t\\tCharacterData memory characterData = _characterDataMap[characterHash_];\\n\\t\\trequire(characterData.avaliable, \\\"Character does not exist!\\\");\\n\\n\\t\\treturn CharacterDataResult({\\n\\t\\t\\tname: characterData.name,\\n\\t\\t\\tstoreId: characterData.storeId,\\n\\t\\t\\tcharacterHash: characterHash_,\\n\\t\\t\\tprice: characterData.price,\\n\\t\\t\\tactive: characterData.active\\n\\t\\t});\\n\\t}\\n\\n\\tfunction getCharacters(uint256 page_, uint256 pageSize_, bool activeOnly_) public view returns (CharacterDataResult[] memory) {\\n\\t\\tuint256 start = (page_-1) * pageSize_;\\n\\t\\tuint256 length = _avaliableCharacters.length;\\n\\t\\tif (start >= length) {\\n            return new CharacterDataResult[](0);\\n        }\\n\\n\\t\\tuint256 resultIndex = 0;\\n        CharacterDataResult[] memory characterDataResultArray = new CharacterDataResult[](pageSize_);\\n        for (uint256 i = start; i < length; i++) {\\n\\t\\t\\tbool added = false;\\n            if ((activeOnly_ && _characterDataMap[_avaliableCharacters[i]].active) || !activeOnly_) {\\n\\t\\t\\t\\tcharacterDataResultArray[resultIndex] = getCharacter(_avaliableCharacters[i]);\\n\\t\\t\\t\\tadded = true;\\n            }\\n            \\n            if (resultIndex + 1 == pageSize_) {\\n                break;\\n            } else if (added)\\n\\t\\t\\t{\\n\\t\\t\\t\\tresultIndex++;\\n\\t\\t\\t}\\n        }\\n        // Check page size\\n        if (resultIndex + 1 < pageSize_) {\\n            // Resize array\\n            CharacterDataResult[] memory characterDataResultArray2 = new CharacterDataResult[](resultIndex);\\n            for (uint256 i = 0; i < resultIndex; i++) {\\n                characterDataResultArray2[i] = characterDataResultArray[i];\\n            }\\n            return characterDataResultArray2;\\n        }\\n        else {\\n            return characterDataResultArray;\\n        }\\n\\t}\\n\\n\\tfunction getCharacterEldPrice(bytes32 characterHash_) public view returns (uint256 priceInEld) {\\n\\t\\tCharacterData memory characterData = _characterDataMap[characterHash_];\\n\\t\\trequire(characterData.avaliable, \\\"Character does not exist!\\\");\\n\\t\\trequire(characterData.active, \\\"Character is not active!\\\");\\n\\n\\t\\tuint256 stableInTokens = _priceResolverInstance.getStablePrice();\\n\\t\\tuint256 stableDecimal = _priceResolverInstance.getStableDecimals();\\n\\t\\tpriceInEld = _getTokenCost(characterData.price, stableInTokens, stableDecimal);\\n\\n\\t\\treturn priceInEld;\\n\\t}\\n\\n\\tfunction getCharacterEldKickback(bytes32 characterHash_) public view returns (uint256 eldAmount) {\\n\\t\\tCharacterData memory characterData = _characterDataMap[characterHash_];\\n\\t\\trequire(characterData.avaliable, \\\"Character does not exist!\\\");\\n\\t\\trequire(characterData.active, \\\"Character is not active!\\\");\\n\\n\\t\\tuint256 stableInTokens = _priceResolverInstance.getStablePrice();\\n\\t\\tuint256 stableDecimal = _priceResolverInstance.getStableDecimals();\\n\\t\\teldAmount = _getTokenKickback(characterData.price, stableInTokens, stableDecimal);\\n\\n\\t\\treturn eldAmount;\\n\\t}\\n\\n\\tfunction isInitialised() public view returns (bool) {\\n\\t\\treturn _initialised;\\n\\t}\\n\\n\\tfunction supportsInterface(bytes4 interfaceId_) public view override(AccessControlEnumerable) returns (bool) {\\n        return interfaceId_ == type(ICharacterStoreContract).interfaceId || super.supportsInterface(interfaceId_);\\n    }\\n\\n\\t// **************************************************\\n\\t// ************** PRIVATE REGION *******************\\n\\t// **************************************************\\n\\tfunction _getTokenCost(uint256 stableCost_, uint256 stableInTokens_, uint256 stableDecimal_) private view returns (uint256 tokenAmount) {\\n\\t\\tuint256 oneToken = 1 * 10 ** stableDecimal_;\\n\\t\\ttokenAmount = _applyDiscount(stableCost_) * (stableInTokens_) / oneToken;\\n\\n\\t\\t// console.log(\\\"_getTokenCost\\\");\\n\\t\\t// console.log(\\\"stableCost_ %s STABLE\\\", stableCost_);\\n\\t\\t// console.log(\\\"stableInTokens_\\\", stableInTokens_);\\n\\t\\t// console.log(\\\"Result of _getTokenCost: %s ELD\\\", tokenAmount);\\n\\n\\t\\treturn tokenAmount;\\n\\t}\\n\\n\\tfunction _applyDiscount(uint256 amount_) private view returns (uint256 discountAmount) {\\n\\t\\tdiscountAmount = (((100 - _eldDiscount) * amount_) / 100);\\n\\t\\t// console.log(\\\"_applyDiscount\\\");\\n\\t\\t// console.log(\\\"amount: %s\\\", amount_);\\n\\t\\t// console.log(\\\"_eldDiscount: %s\\\", _eldDiscount);\\n\\t\\t// console.log(\\\"Result of _applyDiscount: %s\\\", discountAmount);\\n\\t\\treturn discountAmount;\\n\\t}\\n\\n\\tfunction _getTokenKickback(uint256 stableCost_, uint256 stableInTokens_, uint256 stableDecimal_) private view returns (uint256 tokenAmount) {\\n\\t\\tuint256 oneToken = 1 * 10 ** stableDecimal_;\\n\\t\\ttokenAmount = ((uint256(_eldKickback) * stableCost_) / 100) * stableInTokens_;\\n\\t\\ttokenAmount = tokenAmount / oneToken;\\n\\n\\t\\t// console.log(\\\"_getTokenKickback\\\");\\n\\t\\t// console.log(\\\"stableCost_ %s STABLE\\\", stableCost_);\\n\\t\\t// console.log(\\\"stableInTokens_\\\", stableInTokens_);\\n\\t\\t// console.log(\\\"ELD kickback: %s\\\", _eldKickback);\\n\\t\\t// console.log(\\\"Result of _getTokenKickback: %s ELD\\\", tokenAmount);\\n\\n\\t\\treturn tokenAmount;\\n\\t}\\n\\t// **************************************************\\n\\t// ****************** EVENTS REGION *****************\\n\\t// **************************************************\\n\\tevent CharacterBought(\\n\\t\\tbytes32 indexed characterHash,\\n\\t\\taddress indexed buyerAddress,\\n\\t\\taddress currency,\\n\\t\\tuint price\\n\\t);\\n\\n\\tevent StoreActiveChanged(bool oldValue, bool newValue);\\n\\tevent EldDiscountChanged(uint oldValue, uint newValue);\\n\\tevent EldKickbackChanged(uint oldValue, uint newValue);\\n\\n\\tevent CharacterAdded(bytes32 indexed characterHash);\\n\\tevent CharacterDataUpdated(\\n\\t\\tbytes32 indexed characterHash,\\n\\t\\tuint indexed paramId,\\n\\t\\tbytes oldValue,\\n\\t\\tbytes newValue\\n\\t);\\n\\tevent CharacterRemoved(bytes32 indexed characterHash);\\n\\n\\tevent StableInstanceChanged(address oldValue, address newValue);\\n\\tevent PriceResolverInstanceChanged(address oldValue, address newValue);\\n\\tevent EldInstanceChanged(address oldValue, address newValue);\\n\\tevent VaultAddressChanged(address oldValue, address newValue);\\n\\tevent NftInstanceChanged(address oldValue, address newValue);\\n\\tevent TokensSalvaged(\\n\\t\\taddress indexed tokenAddress,\\n\\t\\taddress indexed userAddress,\\n\\t\\tuint amount\\n\\t);\\n\\tevent ContractKilled();\\n}\\n\",\"keccak256\":\"0xf0aadf2337a291892ec0aa55d358d313ecc8b06b8e416eb4f6ed4cb843bec552\",\"license\":\"MIT\"},\"contracts/interfaces/ICharacterStoreContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface ICharacterStoreContract {\\n  struct CharacterData {\\n    string name;\\n    uint storeId;\\n    bytes32 characterHash;\\n    uint256 price;\\n    bool active;\\n    bool avaliable;\\n  }\\n\\n  struct CharacterDataResult {\\n    string name;\\n    uint storeId;\\n    bytes32 characterHash;\\n    uint256 price;\\n    bool active;\\n  }\\n\\n  enum CharacterParams {\\n    CHAR_NAME,\\n    CHAR_STOREID,\\n    CHAR_HASH,\\n    CHAR_PRICE,\\n    CHAR_ACTIVE\\n  }\\n\\n  function MODERATOR_ROLE (  ) external view returns ( bytes32 );\\n  function addCharacter ( string memory name_, bytes32 characterHash_, uint256 price_, bool active_ ) external;\\n  function buyWithEld ( bytes32 characterHash_ ) external;\\n  function buyWithStable ( bytes32 characterHash_ ) external;\\n  function editCharacter ( bytes32 characterHash_, uint8 paramId_, bytes memory paramData_ ) external;\\n  function getAvaliableCharacters (  ) external view returns ( bytes32[] memory );\\n  function getCharacter ( bytes32 characterHash_ ) external view returns ( CharacterDataResult memory );\\n  function getCharacters(uint256 page_, uint256 pageSize_, bool activeOnly_) external view returns (CharacterDataResult[] memory);\\n  function getCharacterEldPrice(bytes32 characterHash_) external view returns (uint256 priceInEld);\\n  function getCharacterEldKickback(bytes32 characterHash_) external view returns (uint256 eldAmount);\\n  function getEldDiscount (  ) external view returns ( uint8 );\\n  function getEldKickback (  ) external view returns ( uint8 );\\n  function getEldTokenAddress (  ) external view returns ( address );\\n  function getNftAddress (  ) external view returns ( address );\\n  function getPriceResolverAddress (  ) external view returns ( address );\\n  function getStableAddress (  ) external view returns ( address );\\n  function getStoreActive (  ) external view returns ( bool );\\n  function getVaultAddress (  ) external view returns ( address );\\n  function init ( address defaultAdminAddress_, address moderatorAddress_, address vaultAddress_, address priceResolverAddress_, address eldAddress_, address nftAddress_, address stableAddress_, uint8 eldDiscount_, uint8 eldKickback_ ) external;\\n  function isInitialised (  ) external view returns ( bool );\\n  function killContract (  ) external;\\n  function removeCharacter ( bytes32 characterHash_ ) external;\\n  function salvageTokensFromContract ( address tokenAddress_, address to_, uint256 amount_ ) external;\\n  function setEldDiscount ( uint8 eldDiscount_ ) external;\\n  function setEldInstance ( address eldAddress_ ) external;\\n  function setEldKickback ( uint8 eldKickback_ ) external;\\n  function setNftInstance ( address nftAddress_ ) external;\\n  function setPriceResolverInstance ( address priceResolverAddress_ ) external;\\n  function setStableInstance ( address stableAddress_ ) external;\\n  function setStoreActive ( bool active_ ) external;\\n  function setVaultAddress ( address vaultAddress_ ) external;\\n}\\n\",\"keccak256\":\"0xb6006a218343665ed7cb5362834a6729385548cf8846ce3cf480e00bfcb47abb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600160009081556200002590336200002b565b62000169565b6200004282826200006e60201b620029b91760201c565b60008281526002602090815260409091206200006991839062002a24620000f7821b17901c565b505050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620000f35760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45b5050565b60006200010e836001600160a01b03841662000117565b90505b92915050565b6000818152600183016020526040812054620001605750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000111565b50600062000111565b613f2180620001796000396000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c80639010d07c1161013b578063be9a71bd116100b8578063d547741f1161007c578063d547741f1461053a578063e3a728061461054d578063e674f1e014610560578063f581514414610573578063ffdb0c8f1461058457600080fd5b8063be9a71bd146104d0578063c8c54dae146104e1578063ca15c873146104f4578063cdf3a30c14610507578063d15f12271461051a57600080fd5b8063a217fddf116100ff578063a217fddf1461047c578063a2da9fc214610484578063a3e8ae3a14610499578063ac32cb62146104ac578063b29ad298146104bf57600080fd5b80639010d07c1461041e57806391d14854146104315780639dcdfe9f146104445780639ed3c90c14610457578063a0929cda1461046957600080fd5b806336568abe116101c957806365cacaa41161018d57806365cacaa4146103bf578063797669c9146103d057806385535cc5146103e5578063872bd62e146103f857806387a0ee6c1461040b57600080fd5b806336568abe1461034f578063418b66d0146103625780635a2dca9b146103745780635b25d4b91461039957806361aa62e0146103ac57600080fd5b8063248a9ca311610210578063248a9ca3146102b757806325c53589146102e95780632a8b7feb146102fc5780632f1b343f1461031c5780632f2ff15d1461033c57600080fd5b806301ffc9a71461024d578063031eaaf11461027557806305beab171461028a57806314e5d7d31461029c5780631c02708d146102af575b600080fd5b61026061025b366004613440565b610597565b60405190151581526020015b60405180910390f35b610288610283366004613486565b6105c2565b005b600754600160b01b900460ff16610260565b6102886102aa3660046134b2565b61067b565b6102886107af565b6102db6102c536600461355a565b6000908152600160208190526040909120015490565b60405190815260200161026c565b6102db6102f736600461355a565b6107e6565b61030f61030a366004613581565b610a35565b60405161026c919061365d565b600754600160a01b900460ff165b60405160ff909116815260200161026c565b61028861034a3660046136bf565b610cb0565b61028861035d3660046136bf565b610cdb565b600754600160a81b900460ff1661032a565b6004546001600160a01b03165b6040516001600160a01b03909116815260200161026c565b6102886103a7366004613798565b610d59565b6102886103ba36600461355a565b611450565b6006546001600160a01b0316610381565b6102db600080516020613ecc83398151915281565b6102886103f3366004613486565b611661565b610288610406366004613486565b611711565b610288610419366004613803565b6117c1565b61038161042c366004613820565b6118d1565b61026061043f3660046136bf565b6118e9565b61028861045236600461355a565b611914565b600754600160b81b900460ff16610260565b610288610477366004613842565b611d45565b6102db600081565b61048c611ee1565b60405161026c919061387e565b6102db6104a736600461355a565b611f39565b6102886104ba366004613486565b61217f565b6003546001600160a01b0316610381565b6005546001600160a01b0316610381565b6102886104ef3660046138c2565b61222f565b6102db61050236600461355a565b6123c0565b610288610515366004613939565b6123d7565b61052d61052836600461355a565b6124da565b60405161026c9190613954565b6102886105483660046136bf565b612624565b61028861055b36600461355a565b61264a565b61028861056e366004613486565b612806565b6007546001600160a01b0316610381565b610288610592366004613939565b6128b6565b60006001600160e01b03198216634f338f4360e01b14806105bc57506105bc82612a39565b92915050565b600080516020613ecc8339815191526105da81612a5e565b6005546001600160a01b03838116911614156106115760405162461bcd60e51b815260040161060890613967565b60405180910390fd5b600554604080516001600160a01b03928316815291841660208301527f1ef4f9da91d4f3b0b261f426b01f6437b2465f773a568cc3b1d5f5b5581134bc910160405180910390a150600580546001600160a01b0319166001600160a01b0392909216919091179055565b600061068681612a5e565b600754600160b81b900460ff16156106e05760405162461bcd60e51b815260206004820181905260248201527f436f6e747261637420697320616c726561647920696e697469616c69736564216044820152606401610608565b6106eb60008b612a68565b610703600080516020613ecc8339815191528a612a68565b600680546001600160a01b03199081166001600160a01b038b8116919091179092556003805482168a84161790556004805482168984161790556005805490911687831617905560078054600160b81b9287166001600160a81b031990911617600160a01b60ff878116919091029190911762ff00ff60a81b1916600160a81b9186169190910260ff60b81b1916179190911790556107a3600033612a8a565b50505050505050505050565b60006107ba81612a5e565b6040517f57ba5b229dec138f5bae2e9a20b8035310ff14ea10b05bdbfa410625f867c79190600090a133ff5b600081815260096020526040808220815160c081019092528054839291908290829061081190613996565b80601f016020809104026020016040519081016040528092919081815260200182805461083d90613996565b801561088a5780601f1061085f5761010080835404028352916020019161088a565b820191906000526020600020905b81548152906001019060200180831161086d57829003601f168201915b505050918352505060018201546020820152600282015460408201526003820154606082015260049091015460ff8082161515608084015261010090910416151560a0918201528101519091506108f35760405162461bcd60e51b8152600401610608906139d1565b80608001516109145760405162461bcd60e51b815260040161060890613a08565b6003546040805163ec9e039360e01b815290516000926001600160a01b03169163ec9e0393916004808301926020929190829003018186803b15801561095957600080fd5b505afa15801561096d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109919190613a3f565b90506000600360009054906101000a90046001600160a01b03166001600160a01b0316637a5b5a1d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e357600080fd5b505afa1580156109f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1b9190613a3f565b9050610a2c83606001518383612aac565b95945050505050565b6060600083610a45600187613a6e565b610a4f9190613a85565b600854909150808210610a97576040805160008082526020820190925290610a8d565b610a7a6132c2565b815260200190600190039081610a725790505b5092505050610ca9565b6000808667ffffffffffffffff811115610ab357610ab36136eb565b604051908082528060200260200182016040528015610aec57816020015b610ad96132c2565b815260200190600190039081610ad15790505b509050835b83811015610bd2576000878015610b3d57506009600060088481548110610b1a57610b1a613aa4565b6000918252602080832090910154835282019290925260400190206004015460ff165b80610b46575087155b15610b9357610b7160088381548110610b6157610b61613aa4565b90600052602060002001546124da565b838581518110610b8357610b83613aa4565b6020026020010181905250600190505b88610b9f856001613aba565b1415610bab5750610bd2565b8015610bbf5783610bbb81613ad2565b9450505b5080610bca81613ad2565b915050610af1565b5086610bdf836001613aba565b1015610c9e5760008267ffffffffffffffff811115610c0057610c006136eb565b604051908082528060200260200182016040528015610c3957816020015b610c266132c2565b815260200190600190039081610c1e5790505b50905060005b83811015610c9157828181518110610c5957610c59613aa4565b6020026020010151828281518110610c7357610c73613aa4565b60200260200101819052508080610c8990613ad2565b915050610c3f565b509450610ca99350505050565b9350610ca992505050565b9392505050565b60008281526001602081905260409091200154610ccc81612a5e565b610cd68383612a68565b505050565b6001600160a01b0381163314610d4b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610608565b610d558282612a8a565b5050565b600080516020613ecc833981519152610d7181612a5e565b600084815260096020526040902060040154610100900460ff16610da75760405162461bcd60e51b8152600401610608906139d1565b60ff8316610e7a57600082806020019051810190610dc59190613aed565b600086815260096020908152604080832090519394509192610de8929101613b5b565b6040516020818303038152906040529050838051906020012081805190602001201415610e275760405162461bcd60e51b815260040161060890613c03565b8460ff1686600080516020613eac8339815191528387604051610e4b929190613c32565b60405180910390a360008681526009602090815260409091208351610e72928501906132f6565b50505061144a565b60018360ff16141561106557600082806020019051810190610e9c9190613a3f565b600086815260096020526040902060010154600854919250908210610f035760405162461bcd60e51b815260206004820152601760248201527f4e6577206964206973206f7574206f662072616e6765210000000000000000006044820152606401610608565b80821415610f235760405162461bcd60e51b815260040161060890613c03565b600060088381548110610f3857610f38613aa4565b90600052602060002001549050600060088381548110610f5a57610f5a613aa4565b906000526020600020015490508660ff1682600080516020613eac83398151915285604051602001610f8e91815260200190565b60408051601f1981840301815290829052610faa918b90613c32565b60405180910390a38660ff1681600080516020613eac8339815191528886604051602001610fda91815260200190565b60408051601f1981840301815290829052610ff59291613c32565b60405180910390a3816008848154811061101157611011613aa4565b9060005260206000200181905550806008858154811061103357611033613aa4565b60009182526020808320909101929092559283526009905260408083206001908101949094559082529020015561144a565b60028360ff161415611254576000828060200190518101906110879190613a3f565b600081815260096020526040902060040154909150610100900460ff16156110f15760405162461bcd60e51b815260206004820152601f60248201527f43686172616374657220697320616c7265616479206176616c6961626c6521006044820152606401610608565b8360ff1685600080516020613eac8339815191528760405160200161111891815260200190565b60408051601f1981840301815290829052611134918890613c32565b60405180910390a360008581526009602052604090206001015460088054839290811061116357611163613aa4565b600091825260208083209091019290925586815260099091526040808220838352912081548190839061119590613996565b6111a092919061337a565b506001828101549082015560028083015481830155600380840154908301556004928301805493909201805460ff948516151560ff19821681178355935461010090819004909516151590940261ff001990931661ffff1990941693909317919091179091556000828152600960205260408082209092018390558681529081209061122c82826133f5565b50600060018201819055600282018190556003820155600401805461ffff191690555061144a565b60038360ff161415611322576000828060200190518101906112769190613a3f565b6000868152600960205260409020600301549091508114156112aa5760405162461bcd60e51b815260040161060890613c03565b8360ff1685600080516020613eac83398151915285600960008a8152602001908152602001600020600301546040516020016112e891815260200190565b60408051601f19818403018152908290526113039291613c32565b60405180910390a360008581526009602052604090206003015561144a565b60048360ff16141561140b576000828060200190518101906113449190613c57565b60008681526009602052604090206004015490915060ff161515811515141561137f5760405162461bcd60e51b815260040161060890613c03565b60008581526009602090815260409182902060040154915160ff808816938993600080516020613eac8339815191529389936113c393169101901515815260200190565b60408051601f19818403018152908290526113de9291613c32565b60405180910390a36000858152600960205260409020600401805460ff191691151591909117905561144a565b60405162461bcd60e51b815260206004820152601460248201527314185c985b48191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610608565b50505050565b600080516020613ecc83398151915261146881612a5e565b600082815260096020526040902060040154610100900460ff1661149e5760405162461bcd60e51b8152600401610608906139d1565b6008546000906114b090600190613a6e565b60008481526009602052604090206001015490915081146115cc576000600882815481106114e0576114e0613aa4565b90600052602060002001549050600060096000868152602001908152602001600020600101549050846008848154811061151c5761151c613aa4565b9060005260206000200181905550816008828154811061153e5761153e613aa4565b6000918252602080832091909101929092558681526009825260408082206001908101879055858352918190208201849055805192830184905290918791600080516020613eac833981519152910160408051601f1981840301815282825260208301899052910160408051601f19818403018152908290526115c19291613c32565b60405180910390a350505b60088054806115dd576115dd613c74565b60008281526020808220830160001990810183905590920190925584825260099052604081209061160e82826133f5565b5060006001820181905560028201819055600382018190556004909101805461ffff1916905560405184917f9d2baf855a82b9ade3c757b5b23166f2704a0a890332c3996f86482ced2edc3691a2505050565b600080516020613ecc83398151915261167981612a5e565b6006546001600160a01b03838116911614156116a75760405162461bcd60e51b815260040161060890613967565b600654604080516001600160a01b03928316815291841660208301527fa4f45a63389e7031375b7e4422cccea56ab403ecedbd3ce1f0587acaa1999ae3910160405180910390a150600680546001600160a01b0319166001600160a01b0392909216919091179055565b600080516020613ecc83398151915261172981612a5e565b6004546001600160a01b03838116911614156117575760405162461bcd60e51b815260040161060890613967565b600454604080516001600160a01b03928316815291841660208301527f4be3cf9acbd272e5cb42afb5d0efa1cd26b618eccc2ae3750657d4d558d38b2b910160405180910390a150600480546001600160a01b0319166001600160a01b0392909216919091179055565b600080516020613ecc8339815191526117d981612a5e565b60075460ff600160b01b909104161515821515141561180a5760405162461bcd60e51b815260040161060890613967565b811561186957600754600160b81b900460ff166118695760405162461bcd60e51b815260206004820152601c60248201527f436f6e7472616374206973206e6f7420696e697469616c6973656421000000006044820152606401610608565b60075460408051600160b01b90920460ff161515825283151560208301527f2c72ac42fdd9ac54e679d91c2ec0aef5d43f3aa87031ede92d796fd5cdfb0370910160405180910390a15060078054911515600160b01b0260ff60b01b19909216919091179055565b6000828152600260205260408120610ca99083612ae6565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61191c612af2565b600754600160b01b900460ff166119685760405162461bcd60e51b815260206004820152601060248201526f53746f726520697320636c6f7365642160801b6044820152606401610608565b600081815260096020526040808220815160c0810190925280548290829061198f90613996565b80601f01602080910402602001604051908101604052809291908181526020018280546119bb90613996565b8015611a085780601f106119dd57610100808354040283529160200191611a08565b820191906000526020600020905b8154815290600101906020018083116119eb57829003601f168201915b505050918352505060018201546020820152600282015460408201526003820154606082015260049091015460ff8082161515608084015261010090910416151560a091820152810151909150611a715760405162461bcd60e51b8152600401610608906139d1565b8060800151611a925760405162461bcd60e51b815260040161060890613a08565b600754611abc906001600160a01b03163360065460608501516001600160a01b0390911690612b4c565b6005546001600160a01b03166367d51cc4336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101859052604401602060405180830381600087803b158015611b1657600080fd5b505af1158015611b2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4e9190613a3f565b506007546060820151604080516001600160a01b03909316835260208301919091528051339285927f2186723525ab485cb893185186d1424e5d616ce96c8c19dc6ce99e4d32b106f592918290030190a36003546040805163ec9e039360e01b815290516000926001600160a01b03169163ec9e0393916004808301926020929190829003018186803b158015611be457600080fd5b505afa158015611bf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1c9190613a3f565b90506000600360009054906101000a90046001600160a01b03166001600160a01b0316637a5b5a1d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c6e57600080fd5b505afa158015611c82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca69190613a3f565b90506000611cb984606001518484612ba6565b90508015611d34576004546001600160a01b031663a1448194336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b158015611d1b57600080fd5b505af1158015611d2f573d6000803e3d6000fd5b505050505b50505050611d426001600055565b50565b6000611d5081612a5e565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0386169181019190915280820184905281518082038301815260608201909252600091611ddf917fa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b9190608001613c8a565b60405160208183030381529060405290506000856001600160a01b031682604051611e0a9190613cbb565b6000604051808303816000865af19150503d8060008114611e47576040519150601f19603f3d011682016040523d82523d6000602084013e611e4c565b606091505b5050905080611e8c5760405162461bcd60e51b815260206004820152600c60248201526b43616c6c206661696c65642160a01b6044820152606401610608565b846001600160a01b0316866001600160a01b03167fc00a88ee4656f9bf9caef53a29be902b0017cf1e454eaed6526c08b8c2e106cf86604051611ed191815260200190565b60405180910390a3505050505050565b60606008805480602002602001604051908101604052809291908181526020018280548015611f2f57602002820191906000526020600020905b815481526020019060010190808311611f1b575b5050505050905090565b600081815260096020526040808220815160c0810190925280548392919082908290611f6490613996565b80601f0160208091040260200160405190810160405280929190818152602001828054611f9090613996565b8015611fdd5780601f10611fb257610100808354040283529160200191611fdd565b820191906000526020600020905b815481529060010190602001808311611fc057829003601f168201915b505050918352505060018201546020820152600282015460408201526003820154606082015260049091015460ff8082161515608084015261010090910416151560a0918201528101519091506120465760405162461bcd60e51b8152600401610608906139d1565b80608001516120675760405162461bcd60e51b815260040161060890613a08565b6003546040805163ec9e039360e01b815290516000926001600160a01b03169163ec9e0393916004808301926020929190829003018186803b1580156120ac57600080fd5b505afa1580156120c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e49190613a3f565b90506000600360009054906101000a90046001600160a01b03166001600160a01b0316637a5b5a1d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561213657600080fd5b505afa15801561214a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216e9190613a3f565b9050610a2c83606001518383612ba6565b600080516020613ecc83398151915261219781612a5e565b6003546001600160a01b03838116911614156121c55760405162461bcd60e51b815260040161060890613967565b600354604080516001600160a01b03928316815291841660208301527fe10eeb9be10e1525a4281be32ba4ca78181b1f10ad12e61e2cc6ea5eb19bbf4e910160405180910390a150600380546001600160a01b0319166001600160a01b0392909216919091179055565b600080516020613ecc83398151915261224781612a5e565b600084815260096020526040902060040154610100900460ff16156122ae5760405162461bcd60e51b815260206004820152601f60248201527f43686172616374657220697320616c7265616479206176616c6961626c6521006044820152606401610608565b6040805160c081018252868152600854602080830191909152818301879052606082018690528415156080830152600160a083015260008781526009825292909220815180519293919261230592849201906132f6565b50602082015160018083019190915560408084015160028401556060840151600384015560808401516004909301805460a09095015115156101000261ff00199415159490941661ffff19909516949094179290921790925560088054928301815560009081527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee39092018690555185917f481804139f27a13d67f90159c541854c62188fd0702fe2b36c6bf68cafda0f8d91a25050505050565b60008181526002602052604081206105bc90612bff565b600080516020613ecc8339815191526123ef81612a5e565b60075460ff838116600160a81b90920416141561241e5760405162461bcd60e51b815260040161060890613967565b60648260ff16106124715760405162461bcd60e51b815260206004820152601d60248201527f56616c7565206d757374206265206c6f776572207468616e20313030210000006044820152606401610608565b6007546040805160ff600160a81b9093048316815291841660208301527f7fc47970f0efc93356352e3578a559c75e78d3a9720868e9e0d635d0fcdecd3e910160405180910390a1506007805460ff909216600160a81b0260ff60a81b19909216919091179055565b6124e26132c2565b600082815260096020526040808220815160c0810190925280548290829061250990613996565b80601f016020809104026020016040519081016040528092919081815260200182805461253590613996565b80156125825780601f1061255757610100808354040283529160200191612582565b820191906000526020600020905b81548152906001019060200180831161256557829003601f168201915b505050918352505060018201546020820152600282015460408201526003820154606082015260049091015460ff8082161515608084015261010090910416151560a0918201528101519091506125eb5760405162461bcd60e51b8152600401610608906139d1565b6040805160a081018252825181526020808401519082015290810193909352606080820151908401526080908101511515908301525090565b6000828152600160208190526040909120015461264081612a5e565b610cd68383612a8a565b612652612af2565b600754600160b01b900460ff1661269e5760405162461bcd60e51b815260206004820152601060248201526f53746f726520697320636c6f7365642160801b6044820152606401610608565b60006126a9826107e6565b9050600081116126fb5760405162461bcd60e51b815260206004820152601f60248201527f43686172616374657220454c4420707269636520697320696e76616c696421006044820152606401610608565b60045461271e906001600160a01b0316336006546001600160a01b031684612b4c565b6005546001600160a01b03166367d51cc4336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101859052604401602060405180830381600087803b15801561277857600080fd5b505af115801561278c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b09190613a3f565b50600454604080516001600160a01b039092168252602082018390528051339285927f2186723525ab485cb893185186d1424e5d616ce96c8c19dc6ce99e4d32b106f592918290030190a350611d426001600055565b600080516020613ecc83398151915261281e81612a5e565b6007546001600160a01b038381169116141561284c5760405162461bcd60e51b815260040161060890613967565b600754604080516001600160a01b03928316815291841660208301527fb5d348ed5569c478e77eeda8045a117d807ce9317698c3f01b458631b466f822910160405180910390a150600780546001600160a01b0319166001600160a01b0392909216919091179055565b600080516020613ecc8339815191526128ce81612a5e565b60075460ff838116600160a01b9092041614156128fd5760405162461bcd60e51b815260040161060890613967565b60648260ff16106129505760405162461bcd60e51b815260206004820152601d60248201527f56616c7565206d757374206265206c6f776572207468616e20313030210000006044820152606401610608565b6007546040805160ff600160a01b9093048316815291841660208301527f85f39400b0549bd3e00bf53a53a2db7cc032175818775d68f9259fe7a60a9a30910160405180910390a1506007805460ff909216600160a01b0260ff60a01b19909216919091179055565b6129c382826118e9565b610d555760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000610ca9836001600160a01b038416612c09565b60006001600160e01b03198216635a05180f60e01b14806105bc57506105bc82612c58565b611d428133612c8d565b612a7282826129b9565b6000828152600260205260409020610cd69082612a24565b612a948282612ce6565b6000828152600260205260409020610cd69082612d4d565b600080612aba83600a613dbb565b612ac5906001613a85565b90508084612ad287612d62565b612adc9190613a85565b610a2c9190613dc7565b6000610ca98383612d98565b60026000541415612b455760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610608565b6002600055565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261144a908590612dc2565b600080612bb483600a613dbb565b612bbf906001613a85565b6007549091508490606490612bdf908890600160a81b900460ff16613a85565b612be99190613dc7565b612bf39190613a85565b9150610a2c8183613dc7565b60006105bc825490565b6000818152600183016020526040812054612c50575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105bc565b5060006105bc565b60006001600160e01b03198216637965db0b60e01b14806105bc57506301ffc9a760e01b6001600160e01b03198316146105bc565b612c9782826118e9565b610d5557612ca481612e94565b612caf836020612ea6565b604051602001612cc0929190613de9565b60408051601f198184030181529082905262461bcd60e51b825261060891600401613e5e565b612cf082826118e9565b15610d555760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610ca9836001600160a01b038416613042565b6007546000906064908390612d8190600160a01b900460ff1683613e71565b60ff16612d8e9190613a85565b6105bc9190613dc7565b6000826000018281548110612daf57612daf613aa4565b9060005260206000200154905092915050565b6000612e17826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131359092919063ffffffff16565b805190915015610cd65780806020019051810190612e359190613c57565b610cd65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610608565b60606105bc6001600160a01b03831660145b60606000612eb5836002613a85565b612ec0906002613aba565b67ffffffffffffffff811115612ed857612ed86136eb565b6040519080825280601f01601f191660200182016040528015612f02576020820181803683370190505b509050600360fc1b81600081518110612f1d57612f1d613aa4565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612f4c57612f4c613aa4565b60200101906001600160f81b031916908160001a9053506000612f70846002613a85565b612f7b906001613aba565b90505b6001811115612ff3576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612faf57612faf613aa4565b1a60f81b828281518110612fc557612fc5613aa4565b60200101906001600160f81b031916908160001a90535060049490941c93612fec81613e94565b9050612f7e565b508315610ca95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610608565b6000818152600183016020526040812054801561312b576000613066600183613a6e565b855490915060009061307a90600190613a6e565b90508181146130df57600086600001828154811061309a5761309a613aa4565b90600052602060002001549050808760000184815481106130bd576130bd613aa4565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806130f0576130f0613c74565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105bc565b60009150506105bc565b6060613144848460008561314c565b949350505050565b6060824710156131ad5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610608565b600080866001600160a01b031685876040516131c99190613cbb565b60006040518083038185875af1925050503d8060008114613206576040519150601f19603f3d011682016040523d82523d6000602084013e61320b565b606091505b509150915061321c87838387613227565b979650505050505050565b6060831561329357825161328c576001600160a01b0385163b61328c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610608565b5081613144565b61314483838151156132a85781518083602001fd5b8060405162461bcd60e51b81526004016106089190613e5e565b6040518060a00160405280606081526020016000815260200160008019168152602001600081526020016000151581525090565b82805461330290613996565b90600052602060002090601f016020900481019282613324576000855561336a565b82601f1061333d57805160ff191683800117855561336a565b8280016001018555821561336a579182015b8281111561336a57825182559160200191906001019061334f565b5061337692915061342b565b5090565b82805461338690613996565b90600052602060002090601f0160209004810192826133a8576000855561336a565b82601f106133b9578054855561336a565b8280016001018555821561336a57600052602060002091601f016020900482015b8281111561336a5782548255916001019190600101906133da565b50805461340190613996565b6000825580601f10613411575050565b601f016020900490600052602060002090810190611d4291905b5b80821115613376576000815560010161342c565b60006020828403121561345257600080fd5b81356001600160e01b031981168114610ca957600080fd5b80356001600160a01b038116811461348157600080fd5b919050565b60006020828403121561349857600080fd5b610ca98261346a565b803560ff8116811461348157600080fd5b60008060008060008060008060006101208a8c0312156134d157600080fd5b6134da8a61346a565b98506134e860208b0161346a565b97506134f660408b0161346a565b965061350460608b0161346a565b955061351260808b0161346a565b945061352060a08b0161346a565b935061352e60c08b0161346a565b925061353c60e08b016134a1565b915061354b6101008b016134a1565b90509295985092959850929598565b60006020828403121561356c57600080fd5b5035919050565b8015158114611d4257600080fd5b60008060006060848603121561359657600080fd5b833592506020840135915060408401356135af81613573565b809150509250925092565b60005b838110156135d55781810151838201526020016135bd565b8381111561144a5750506000910152565b600081518084526135fe8160208601602086016135ba565b601f01601f19169290920160200192915050565b6000815160a0845261362760a08501826135e6565b90506020830151602085015260408301516040850152606083015160608501526080830151151560808501528091505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156136b257603f198886030184526136a0858351613612565b94509285019290850190600101613684565b5092979650505050505050565b600080604083850312156136d257600080fd5b823591506136e26020840161346a565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561372a5761372a6136eb565b604052919050565b600067ffffffffffffffff82111561374c5761374c6136eb565b50601f01601f191660200190565b600061376d61376884613732565b613701565b905082815283838301111561378157600080fd5b828260208301376000602084830101529392505050565b6000806000606084860312156137ad57600080fd5b833592506137bd602085016134a1565b9150604084013567ffffffffffffffff8111156137d957600080fd5b8401601f810186136137ea57600080fd5b6137f98682356020840161375a565b9150509250925092565b60006020828403121561381557600080fd5b8135610ca981613573565b6000806040838503121561383357600080fd5b50508035926020909101359150565b60008060006060848603121561385757600080fd5b6138608461346a565b925061386e6020850161346a565b9150604084013590509250925092565b6020808252825182820181905260009190848201906040850190845b818110156138b65783518352928401929184019160010161389a565b50909695505050505050565b600080600080608085870312156138d857600080fd5b843567ffffffffffffffff8111156138ef57600080fd5b8501601f8101871361390057600080fd5b61390f8782356020840161375a565b9450506020850135925060408501359150606085013561392e81613573565b939692955090935050565b60006020828403121561394b57600080fd5b610ca9826134a1565b602081526000610ca96020830184613612565b60208082526015908201527456616c756520697320616c7265616479207365742160581b604082015260600190565b600181811c908216806139aa57607f821691505b602082108114156139cb57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526019908201527f43686172616374657220646f6573206e6f742065786973742100000000000000604082015260600190565b60208082526018908201527f436861726163746572206973206e6f7420616374697665210000000000000000604082015260600190565b600060208284031215613a5157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015613a8057613a80613a58565b500390565b6000816000190483118215151615613a9f57613a9f613a58565b500290565b634e487b7160e01b600052603260045260246000fd5b60008219821115613acd57613acd613a58565b500190565b6000600019821415613ae657613ae6613a58565b5060010190565b600060208284031215613aff57600080fd5b815167ffffffffffffffff811115613b1657600080fd5b8201601f81018413613b2757600080fd5b8051613b3561376882613732565b818152856020838501011115613b4a57600080fd5b610a2c8260208301602086016135ba565b600060208083526000845481600182811c915080831680613b7d57607f831692505b858310811415613b9b57634e487b7160e01b85526022600452602485fd5b878601838152602001818015613bb85760018114613bc957613bf4565b60ff19861682528782019650613bf4565b60008b81526020902060005b86811015613bee57815484820152908501908901613bd5565b83019750505b50949998505050505050505050565b602080825260159082015274506172616d20697320616c7265616479207365742160581b604082015260600190565b604081526000613c4560408301856135e6565b8281036020840152610a2c81856135e6565b600060208284031215613c6957600080fd5b8151610ca981613573565b634e487b7160e01b600052603160045260246000fd5b6001600160e01b0319831681528151600090613cad8160048501602087016135ba565b919091016004019392505050565b60008251613ccd8184602087016135ba565b9190910192915050565b600181815b80851115613d12578160001904821115613cf857613cf8613a58565b80851615613d0557918102915b93841c9390800290613cdc565b509250929050565b600082613d29575060016105bc565b81613d36575060006105bc565b8160018114613d4c5760028114613d5657613d72565b60019150506105bc565b60ff841115613d6757613d67613a58565b50506001821b6105bc565b5060208310610133831016604e8410600b8410161715613d95575081810a6105bc565b613d9f8383613cd7565b8060001904821115613db357613db3613a58565b029392505050565b6000610ca98383613d1a565b600082613de457634e487b7160e01b600052601260045260246000fd5b500490565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613e218160178501602088016135ba565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613e528160288401602088016135ba565b01602801949350505050565b602081526000610ca960208301846135e6565b600060ff821660ff841680821015613e8b57613e8b613a58565b90039392505050565b600081613ea357613ea3613a58565b50600019019056fe63f3fff32f360579b3b3b2428514459baa9e796b4c021cf05f92156c3cf72c9d71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834fa26469706673582212202eb66331678809456be05a1577c99d63e9ff11f82e48cc746ec95bce205e4f2a64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 921,
        "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 396,
        "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)391_storage)"
      },
      {
        "astId": 706,
        "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)3113_storage)"
      },
      {
        "astId": 3431,
        "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
        "label": "_priceResolverInstance",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IPriceResolverContract)109"
      },
      {
        "astId": 3434,
        "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
        "label": "_eldInstance",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IEldfallTokenContract)371"
      },
      {
        "astId": 3437,
        "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
        "label": "_nftInstance",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ICharacterNftContract)322"
      },
      {
        "astId": 3439,
        "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
        "label": "_vaultAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3442,
        "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
        "label": "_stableInstance",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)1042"
      },
      {
        "astId": 3444,
        "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
        "label": "_eldDiscount",
        "offset": 20,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 3446,
        "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
        "label": "_eldKickback",
        "offset": 21,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 3448,
        "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
        "label": "_storeActive",
        "offset": 22,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 3450,
        "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
        "label": "_initialised",
        "offset": 23,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 3453,
        "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
        "label": "_avaliableCharacters",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 3458,
        "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
        "label": "_characterDataMap",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_struct(CharacterData)5136_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICharacterNftContract)322": {
        "encoding": "inplace",
        "label": "contract ICharacterNftContract",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1042": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IEldfallTokenContract)371": {
        "encoding": "inplace",
        "label": "contract IEldfallTokenContract",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceResolverContract)109": {
        "encoding": "inplace",
        "label": "contract IPriceResolverContract",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3113_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3113_storage"
      },
      "t_mapping(t_bytes32,t_struct(CharacterData)5136_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ICharacterStoreContract.CharacterData)",
        "numberOfBytes": "32",
        "value": "t_struct(CharacterData)5136_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)391_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)391_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3113_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3112,
            "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2798_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(CharacterData)5136_storage": {
        "encoding": "inplace",
        "label": "struct ICharacterStoreContract.CharacterData",
        "members": [
          {
            "astId": 5125,
            "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5127,
            "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
            "label": "storeId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5129,
            "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
            "label": "characterHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 5131,
            "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5133,
            "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
            "label": "active",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 5135,
            "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
            "label": "avaliable",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)391_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 388,
            "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 390,
            "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2798_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2793,
            "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2797,
            "contract": "contracts/CharacterStoreContract.sol:CharacterStoreContract",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}